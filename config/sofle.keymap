/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// Import Unicode behavior
#include <zmk-unicode/zmk-unicode.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3
#define ACCENT 4

/ {
    // Conditional layers

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };

    // Macros for Portuguese accents using Unicode
    macros {
        // Hyper key
        hyper: hyper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &kp LCTRL &kp LALT &kp LGUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LSHFT &kp LCTRL &kp LALT &kp LGUI>;

            label = "HYPER";
        };

        // Lowercase acute accents
        a_acute: a_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00E1>; // á
            label = "A_ACUTE";
        };

        e_acute: e_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00E9>; // é
            label = "E_ACUTE";
        };

        i_acute: i_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00ED>; // í
            label = "I_ACUTE";
        };

        o_acute: o_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00F3>; // ó
            label = "O_ACUTE";
        };

        u_acute: u_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00FA>; // ú
            label = "U_ACUTE";
        };

        // Uppercase acute accents
        a_acute_up: a_acute_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00C1>; // Á
            label = "A_ACUTE_UP";
        };

        e_acute_up: e_acute_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00C9>; // É
            label = "E_ACUTE_UP";
        };

        i_acute_up: i_acute_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00CD>; // Í
            label = "I_ACUTE_UP";
        };

        o_acute_up: o_acute_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00D3>; // Ó
            label = "O_ACUTE_UP";
        };

        u_acute_up: u_acute_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00DA>; // Ú
            label = "U_ACUTE_UP";
        };

        // Lowercase circumflex accents
        a_circum: a_circum {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00E2>; // â
            label = "A_CIRCUM";
        };

        e_circum: e_circum {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00EA>; // ê
            label = "E_CIRCUM";
        };

        o_circum: o_circum {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00F4>; // ô
            label = "O_CIRCUM";
        };

        // Uppercase circumflex accents
        a_circum_up: a_circum_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00C2>; // Â
            label = "A_CIRCUM_UP";
        };

        e_circum_up: e_circum_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00CA>; // Ê
            label = "E_CIRCUM_UP";
        };

        o_circum_up: o_circum_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00D4>; // Ô
            label = "O_CIRCUM_UP";
        };

        // Lowercase tilde accents
        a_tilde: a_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00E3>; // ã
            label = "A_TILDE";
        };

        o_tilde: o_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00F5>; // õ
            label = "O_TILDE";
        };

        // Uppercase tilde accents
        a_tilde_up: a_tilde_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00C3>; // Ã
            label = "A_TILDE_UP";
        };

        o_tilde_up: o_tilde_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00D5>; // Õ
            label = "O_TILDE_UP";
        };

        // Cedilla
        c_cedilla: c_cedilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00E7>; // ç
            label = "C_CEDILLA";
        };

        c_cedilla_up: c_cedilla_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00C7>; // Ç
            label = "C_CEDILLA_UP";
        };

        // Grave accent
        a_grave: a_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00E0>; // à
            label = "A_GRAVE";
        };

        a_grave_up: a_grave_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&uc 0x00C0>; // À
            label = "A_GRAVE_UP";
        };
    };

    // Behaviors for mod-morph (shift detection)
    behaviors {
        a_acut_morph: a_acut_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&a_acute>, <&a_acute_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        e_acut_morph: e_acut_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&e_acute>, <&e_acute_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        i_acut_morph: i_acut_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&i_acute>, <&i_acute_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_acut_morph: o_acut_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&o_acute>, <&o_acute_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        u_acut_morph: u_acut_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&u_acute>, <&u_acute_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        a_circ_morph: a_circ_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&a_circum>, <&a_circum_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        e_circ_morph: e_circ_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&e_circum>, <&e_circum_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_circ_morph: o_circ_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&o_circum>, <&o_circum_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        a_tild_morph: a_tild_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&a_tilde>, <&a_tilde_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_tild_morph: o_tild_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&o_tilde>, <&o_tilde_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        c_cedi_morph: c_cedi_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&c_cedilla>, <&c_cedilla_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        a_grav_morph: a_grav_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&a_grave>, <&a_grave_up>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    // Combos
    combos {
        compatible = "zmk,combos";

        enter_right {
            bindings = <&kp RET>;
            key-positions = <55 56>;
            layers = <0 1>;
            timeout-ms = <75>;
        };

        enter_left {
            bindings = <&kp RET>;
            key-positions = <53 54>;
            layers = <0 1>;
            timeout-ms = <75>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "default";
            bindings = <
&kp ESC    &kp N1  &kp N2    &kp N3    &kp N4  &kp N5                               &kp N6     &kp N7            &kp N8             &kp N9     &kp N0            &kp EQUAL
&kp TAB    &kp Q   &kp W     &kp E     &kp R   &kp T                                &kp Y      &kp U             &kp I              &kp O      &kp P             &kp MINUS
&kp LSHFT  &kp A   &kp S     &kp D     &kp F   &kp G                                &kp H      &kp J             &kp K              &kp L      &kp SINGLE_QUOTE  &kp SEMI
&kp LCTRL  &kp Z   &kp X     &kp C     &kp V   &kp B   &kp PRINTSCREEN    &tog 2    &kp N      &kp M             &kp COMMA          &kp DOT    &kp FSLH          &kp BSLH
                   &kp LGUI  &kp LALT  &hyper  &mo 3   &mo 1              &kp BSPC  &kp SPACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GRAVE
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>, <&inc_dec_kp UP DOWN>;
        };

        Nav {
            label = "nav";
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                      &trans    &trans         &trans     &trans     &trans  &trans
&trans  &trans    &kp UP    &trans     &kp PG_UP  &kp HOME                    &trans    &trans         &trans     &trans     &trans  &trans
&trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN  &kp END                     &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT  &trans  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans    &trans  &kp HOME  &kp PAGE_DOWN  &kp PG_UP  &kp END    &trans  &trans
                  &trans    &trans     &trans     &trans    &trans    &trans  &trans    &trans         &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        Num {
            bindings = <
&kp F1                 &kp F2     &kp F3  &kp F4  &kp F5  &kp F6                                   &kp F7           &kp F8  &kp F9                &kp F10                &kp F11    &kp F12
&kp LEFT_PARENTHESIS   &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp ASTERISK                             &kp ASTERISK     &kp N7  &kp N8                &kp N9                 &kp EQUAL  &kp PERCENT
&kp RIGHT_PARENTHESIS  &kp PLUS   &kp N4  &kp N5  &kp N6  &kp SLASH                                &kp FSLH         &kp N4  &kp N5                &kp N6                 &kp PLUS   &kp DOLLAR
&trans                 &kp MINUS  &kp N1  &kp N2  &kp N3  &trans        &trans           &trans    &kp EXCLAMATION  &kp N1  &kp N2                &kp N3                 &kp MINUS  &trans
                                  &trans  &trans  &kp N0  &kp ENTER     &kp BACKSPACE    &kp BSPC  &kp RET          &kp N0  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
            >;

            label = "num";
        };

        accent_layer {
            label = "accent";
            bindings = <
&trans  &a_circ_morph  &trans  &trans        &trans  &trans                            &trans  &trans        &trans        &o_circ_morph  &trans  &trans
&trans  &a_tild_morph  &trans  &e_acut_morph &trans  &trans                            &trans  &u_acut_morph &i_acut_morph &o_acut_morph  &trans  &trans
&trans  &a_acut_morph  &trans  &e_circ_morph &trans  &trans                            &trans  &trans        &trans        &o_tild_morph  &trans  &trans
&trans  &a_grav_morph  &trans  &c_cedi_morph &trans  &trans  &trans    &trans          &trans  &trans        &trans        &trans         &trans  &trans
                       &trans  &trans        &trans  &trans  &trans    &kp LEFT_SHIFT  &trans  &trans        &trans        &trans
            >;
        };

        adjust_layer {
            label = "adjust";
            bindings = <
&bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                               &none  &none   &none  &none  &none  &none
&ext_power EP_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF                            &none  &none   &none  &none  &none  &none
&none              &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &none            &none            &none                                      &none  &none   &none  &none  &none  &none
&none              &none            &none            &none            &none            &none            &rgb_ug RGB_TOG    &none  &none  &trans  &none  &none  &none  &none
                                    &none            &none            &none            &none            &none              &none  &none  &none   &none  &none
            >;
        };
    };
};
